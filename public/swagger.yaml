openapi: 3.0.0
info:
  title: Inventory Management API
  version: 1.0.0
  description: API for managing inventory, users, and authentication.
servers:
  - url: http://localhost:5000/api

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and return JWT tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: adminpassword
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate the current user's JWT token.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generate a new access token using the refresh token.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Unauthorized

  /auth/account:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Current user's profile
          content:
            application/json:
              schema:
                type: object

  /products:
    get:
      summary: List products
      description: Retrieve a paginated list of products.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
          description: Number of products per page
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  page:
                    type: integer
                  per_page:
                    type: integer

    post:
      summary: Create a new product
      description: Admin-only endpoint to add a product.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Admins only

  /products/{id}:
    put:
      summary: Update a product
      description: Admin-only endpoint to update product details.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '403':
          description: Admins only

    delete:
      summary: Delete a product
      description: Admin-only endpoint to soft-delete a product.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '403':
          description: Admins only

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer
        category:
          type: string
        deleted_at:
          type: string
          format: date-time
